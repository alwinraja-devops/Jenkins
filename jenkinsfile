pipeline {
    agent any

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'project', description: 'Git branch to build')
    }

    environment {
        AWS_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = '340752818053'
        ECR_REPO = 'simple-node-app'
        IMAGE_TAG = 'latest'
        ECR_URL = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}"
        ECS_CLUSTER = 'jenkins-demo-cluster'
        ECS_SERVICE = 'jenkins-demo-service'
        ECS_TASK_FAMILY = 'jenkins-demo-task'
        CONTAINER_NAME = 'simple-container'
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: "*/${params.BRANCH_NAME}"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/alwinraja-devops/Jenkins.git'
                    ]]
                ])
            }
        }

        stage('Configure AWS Credentials') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'aws-creds',
                    usernameVariable: 'AWS_ACCESS_KEY_ID',
                    passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                )]) {
                    sh '''
                        mkdir -p ~/.aws
                        echo "[default]" > ~/.aws/credentials
                        echo "aws_access_key_id=${AWS_ACCESS_KEY_ID}" >> ~/.aws/credentials
                        echo "aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
                        echo "[default]" > ~/.aws/config
                        echo "region=${AWS_REGION}" >> ~/.aws/config
                    '''
                }
            }
        }

        stage('Create ECR Repo if Missing') {
            steps {
                sh '''
                    aws ecr describe-repositories --repository-names $ECR_REPO || \
                    aws ecr create-repository --repository-name $ECR_REPO
                '''
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                sh '''
                    docker build -t $ECR_REPO:$IMAGE_TAG .
                    aws ecr get-login-password --region $AWS_REGION | \
                    docker login --username AWS --password-stdin $ECR_URL
                    docker tag $ECR_REPO:$IMAGE_TAG $ECR_URL:$IMAGE_TAG
                    docker push $ECR_URL:$IMAGE_TAG
                '''
            }
        }

        stage('Create ECS Cluster if Missing') {
            steps {
                sh '''
                    if ! aws ecs describe-clusters --clusters $ECS_CLUSTER | grep $ECS_CLUSTER > /dev/null; then
                        aws ecs create-cluster --cluster-name $ECS_CLUSTER
                    else
                        echo "ECS Cluster $ECS_CLUSTER already exists."
                    fi
                '''
            }
        }

        stage('Register Task Definition') {
            steps {
                sh '''
                    cat > task-def.json <<EOF
                    {
                      "family": "$ECS_TASK_FAMILY",
                      "networkMode": "awsvpc",
                      "requiresCompatibilities": ["FARGATE"],
                      "cpu": "256",
                      "memory": "512",
                      "containerDefinitions": [
                        {
                          "name": "$CONTAINER_NAME",
                          "image": "$ECR_URL:$IMAGE_TAG",
                          "essential": true,
                          "portMappings": [
                            {
                              "containerPort": 3000,
                              "protocol": "tcp"
                            }
                          ]
                        }
                      ]
                    }
                    EOF

                    aws ecs register-task-definition --cli-input-json file://task-def.json
                '''
            }
        }

        stage('Create ECS Service if Missing') {
            steps {
                sh '''
                    SERVICE_EXISTS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].status' --output text)

                    if [ "$SERVICE_EXISTS" = "ACTIVE" ]; then
                        echo "ECS service already exists. Updating it..."
                        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
                    else
                        echo "Creating ECS Fargate service..."
                        aws ecs create-service \
                          --cluster $ECS_CLUSTER \
                          --service-name $ECS_SERVICE \
                          --task-definition $ECS_TASK_FAMILY \
                          --desired-count 1 \
                          --launch-type FARGATE \
                          --network-configuration "awsvpcConfiguration={subnets=[subnet-0610380c4b701ba61],securityGroups=[sg-0bd3580461331e484],assignPublicIp=ENABLED}"
                    fi
                '''
            }
        }
    }

    post {
        success {
            echo "✅ Deployed to ECS successfully! Check the ECS Console to view your app."
        }
        failure {
            echo "❌ Pipeline failed. Check console output for error logs."
        }
    }
}
